#!/usr/bin/env perl
use warnings;
use strict;
use Data::Dumper;
use File::Basename;
use FileHandle;
use Cwd 'abs_path';
$|=1;

sub usage {
	my $message = shift;
	my ($starfishEXE, $starfishDIR) = fileparse($0);
	$starfishDIR = abs_path("$starfishDIR..");

	my $usage = qq/
starfish v1.0.0: a workflow for large mobile element discovery

usage: starfish <command> [args]

Gene finder module:
   annotate           de novo HMM-validated gene annotation with metaeuk.
   consolidate        combine new and existing gene annotations.
   sketch             identify genomic neighborhoods containing genes of interest.

Element finder module:
   insert             predict element boundaries and insertion sites. 
   flank              annotate flanking repeats at element boundaries.
   summarize          pick element boundaries, identify overlaps, and name sites.

Region finder module:
   dereplicate        situate element, site, and fragmented haplotypes in
                      genomic regions using flanking orthologs.
    
Visualization commands:
   pair-viz           execute element- element\/site\/region alignments,
                      with optional circos visualization.
   locus-viz          execute element\/region alignments with nucmer and
                      generate synteny schematics with gggenomes.
   genome-viz         visualize elements and sites in a genome with circos.

Auxiliary commands:
   sim                calculate k-mer similarity between captains or elements.
   group              group captains or elements into families based on k-mers.
   extend             extend downstream element boundary using BLASTn alignments.
   coverage           map short reads to a reference element library.
   augment            de novo gene annotation with metaeuk and a profile database.
   cargo              define element pangenomes and calculate cargo-based
                      similarities between elements.
   format             format fasta and gff files (assumes genomeIDs assigned).
   format-ncbi        format ncbi assemblies and assign genomeIDs.
   dereplicate-hood   situate neighborhoods in genomic regions using
                      flanking orthologs.

To learn more about a command, type starfish <command> -h

$starfishDIR\/aux contains additional standalone scripts
$starfishDIR\/db contains fastas and hmms for genes of interest, including YRs
$starfishDIR\/examples contains data for the step-by-step tutorial

/;
	if (not defined $message) {
		$message = $usage;
	} else {
		$message = "$message\nuse -h for more details\n\n" ;
	}	
	die($message);
}

main: {

	# parse and check options
	my $COMMAND = shift @ARGV;
	my $ARGS = join(" ", @ARGV);
	Opts_check($COMMAND);
	my ($starfishEXE, $starfishDIR) = fileparse($0);
	$starfishDIR = abs_path("$starfishDIR../");
	my $datestring = localtime();
	
	# starfish lib
	my $starfishLIB = "$starfishDIR/lib/";
	
	if ($COMMAND eq 'flank') {
		usage("\n[$datestring] error: the \'flank\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/flank");
		print "[$datestring] executing command: starfish flank $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/flank $ARGS");
	} elsif ($COMMAND eq 'extend') {
		usage("\n[$datestring] error: the \'extend\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/extend");
		print "[$datestring] executing command: starfish extend $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/extend $ARGS");
	} elsif ($COMMAND eq 'coverage') {
		usage("\n[$datestring] error: the \'coverage\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/coverage");
		print "[$datestring] executing command: starfish coverage $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/coverage $ARGS");
	} elsif ($COMMAND eq 'insert') {
		usage("\n[$datestring] error: the \'insert\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/insert");
		print "[$datestring] executing command: starfish insert $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/insert $ARGS");
	} elsif ($COMMAND eq 'summarize') {
		usage("\n[$datestring] error: the \'summarize\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/summarize");
		print "[$datestring] executing command: starfish summarize $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/summarize $ARGS");
	} elsif ($COMMAND eq 'sim') {
		usage("\n[$datestring] error: the \'sim\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/sim");
		print "[$datestring] executing command: starfish sim $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/sim $ARGS");
	} elsif ($COMMAND eq 'group') {
		usage("\n[$datestring] error: the \'group\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/group");
		print "[$datestring] executing command: starfish group $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/group $ARGS");
	} elsif ($COMMAND eq 'dereplicate') {
		usage("\n[$datestring] error: the \'dereplicate\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/dereplicate");
		print "[$datestring] executing command: starfish dereplicate $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/dereplicate $ARGS");
	} elsif ($COMMAND eq 'cargo') {
		usage("\n[$datestring] error: the \'cargo\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/cargo");
		print "[$datestring] executing command: starfish cargo $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/cargo $ARGS");
	} elsif ($COMMAND eq 'pair-viz') {
		usage("\n[$datestring] error: the \'pair-viz\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/pair-viz");
		print "[$datestring] executing command: starfish pair-viz $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/pair-viz $ARGS");
	} elsif ($COMMAND eq 'locus-viz') {
		usage("\n[$datestring] error: the \'locus-viz\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/locus-viz");
		print "[$datestring] executing command: starfish locus-viz $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/locus-viz $ARGS");
	} elsif ($COMMAND eq 'genome-viz') {
		usage("\n[$datestring] error: the \'genome-viz\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/genome-viz");
		print "[$datestring] executing command: starfish genome-viz $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/genome-viz $ARGS");
	} elsif ($COMMAND eq 'format') {
		usage("\n[$datestring] error: the \'format\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/format");
		print "[$datestring] executing command: starfish format $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/format $ARGS");
	} elsif ($COMMAND eq 'format-ncbi') {
		usage("\n[$datestring] error: the \'format-ncbi\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/format-ncbi");
		print "[$datestring] executing command: starfish format-ncbi $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/format-ncbi $ARGS");
	} elsif ($COMMAND eq 'annotate') {
		usage("\n[$datestring] error: the \'annotate\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/annotate");
		print "[$datestring] executing command: starfish annotate $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/annotate $ARGS");
	} elsif ($COMMAND eq 'consolidate') {
		usage("\n[$datestring] error: the \'consolidate\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/consolidate");
		print "[$datestring] executing command: starfish consolidate $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/consolidate $ARGS");
	} elsif ($COMMAND eq 'sketch') {
		usage("\n[$datestring] error: the \'sketch\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/sketch");
		print "[$datestring] executing command: starfish sketch $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/sketch $ARGS");
	} elsif ($COMMAND eq 'augment') {
		usage("\n[$datestring] error: the \'augment\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/augment");
		print "[$datestring] executing command: starfish augment $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/augment $ARGS");
	}  elsif ($COMMAND eq 'dereplicate-hood') {
		usage("\n[$datestring] error: the \'dereplicate-hood\' script should be located in $starfishDIR/commands/, but it\'s not..\n") if (! -f "$starfishDIR/commands/dereplicate-hood");
		print "[$datestring] executing command: starfish dereplicate-hood $ARGS\n";
		system("perl -I $starfishLIB $starfishDIR/commands/dereplicate-hood $ARGS");
	} 
}

sub Opts_check {
	my ($COMMAND) = @_;
	usage() if (not defined $COMMAND);
	usage() if ($COMMAND =~ m/^help$|^-h$|^--help$/);
	usage("\nError: please specify a valid command\n") if ($COMMAND !~ m/^sim$|^group$|^dereplicate$|^flank$|^extend$|^summarize$|^insert$|^cargo$|^pair-viz$|^locus-viz$|^coverage$|^genome-viz$|^format$|^format-ncbi$|^annotate$|^consolidate$|^sketch$|^augment$|^dereplicate-hood$/);
}

