#!/usr/bin/env perl
use warnings;
use strict;
use Data::Dumper;
use File::Basename;
use Getopt::Long qw(:config auto_abbrev no_ignore_case);
use Sort::Naturally;
use FileHandle;
$|=1;
# glofish lib
use Fishtank::Utils qw(Fasta_hash_nospace dim_1_hash Open_FH Format_check_fasta Format_check_gff Format_name);

# TODO: check that headers in fasta and gff match (in my wrapper script I had forced a reheader of all files just to be safe)
# TODO: add steps to guess at what the --separator and --nameField are, if these options are not included at the start of a run

# TODO: concatenate all formatted gff3 files into a single file before running
# TODO: concatenate all formatted assembly files and make a blastn database

sub usage {
	my $message = shift;
	my $usage = qq/
usage: starfish format [args]

format fasta and gff files (assumes genomeIDs assigned).

At least one of the following:
-f, --fasta       FILE   2 column tsv: genomeID, path to fasta file to format.
                         (can specify multiple times)
-g, --gff         FILE   2 column tsv: genomeID, path to gff3 file to format.

Required, with defaults:
-s, --separator   STR    character separating genomeID from featureID.
                         (default: '_')
-n, --nameField   STR    GFF3 attribute field where gene features are named.
                         (default: 'Name=')

Optional:
-h, --help               print more details and exit.

/;
	if (not defined $message) {
		$message = $usage;
	} else {
		$message = "$message\nuse -h for more details\n\n" ;
	}	
	die($message);
}

main: {

	# parse and check options
	my %opts;
	GetOptions(\%opts, 
		'fasta|f=s@',
		'gff|g=s',
		'out_dir|o=s',
		'taxa_name|t=s',
		'run_name|r=s',
		'separator|s=s',
		'nameField|namefield|n=s',
		'force|x',
		'h|help');
	Opts_check(\%opts);

	#########################
	#### ORGANIZE FILES  ####
	#########################
	# TODO: handle input from assemblies.txt and gffs.txt
	# TODO: add routines for when gffs.txt is not supplied
	my $GENOME_DIR = $opts{'out_dir'}/tmp
	# Check if directory exists
	# if it does not exist, create it
	# if it does, clean up when -f
	find(sub { unlink if /.*\.header.*|.*\.starfish_format.*/ }, $GENOME_DIR);
	if (-d $GENOME_DIR) {
		if ($opts{'force'}) {
			rmtree("blastdb") if -d "blastdb";
		} else {
			die("\nError: starfish output already exists, use --force/-x to overwrite\n")
		}
	} else {
		mkdir -p $GENOME_DIR or die "Could not create directory $opts{'out_dir'}: $!";
	}

	# make sure dir names don't contain '_'
	find(sub { if (m/_/) { s/_//g; rename $_, $_; } }, $GENOME_DIR);

	#####

	# Create .txt files detailing the absolute path to each genome's gff3 and assembly
	my @files = qw(assemblies.txt gffs.txt);
	my @extensions = qw(.header.fna .header.gff3);

	for my $i (0..1) {
			open my $fh, '>', $files[$i] or die "Could not open file $files[$i]: $!";
			find(sub {
					if (-f and /$extensions[$i]$/) {
							print $fh File::Spec->rel2abs($File::Find::name), "\n";
					}
			}, $GENOME_DIR);
			close $fh;
	}

	# Add columns containing genome code
	open my $fh, '<', $files[0] or die "Could not open file $files[0]: $!";
	my @lines = <$fh>;
	close $fh;
	open my $out, '>', 'genome-codes.txt' or die "Could not open file genome-codes.txt: $!";
	print $out join("\n", map { my ($dir) = splitdir($_); $dir =~ s/_//g; $_; } @lines);
	close $out;

	# Format assemblies.txt and gffs.txt
	for my $i (0..1) {
			open my $fh, '<', $files[$i] or die "Could not open file $files[$i]: $!";
			my @lines = <$fh>;
			close $fh;
			open my $out, '>', "${files[$i]}.temp" or die "Could not open file ${files[$i]}.temp: $!";
			print $out join("\n", map { my ($code, $path) = split(/\t/, $_); "$code\t$path"; } @lines);
			close $out;
			move("${files[$i]}.temp", $files[$i]) or die "Could not move file ${files[$i]}.temp to $files[$i]: $!";
	}

	#########################
	#### REFORMAT FASTAS ####
	#########################

	if (defined $opts{'fasta'}) {

		my $datestring = localtime();
		print "[$datestring] reformatting fasta headers..\n";

		# ? hashs are not concatenated here
		foreach my $fastaFilePath (@{$opts{'fasta'}}) {
			my ($fastaFiles) = dim_1_hash($fastaFilePath, "\t", "0:1");
			foreach my $genomeID (keys %{$fastaFiles}) {
				Format_fasta($genomeID, $fastaFiles->{$genomeID}, $opts{'separator'});
			}
		}
	} 
	
					my $GFF = "$GENOME_DIR/$header_squished/*.gff3";
					if (-e $GFF) {
							open my $fh, '<', $GFF or die "Could not open file $GFF: $!";
							my @lines = <$fh>;
							close $fh;
							if (grep(/^${header}|^$header_squished/, @lines)) {
									open my $out, '>', "${GFF}.header.gff3" or die "Could not open file ${GFF}.header.gff3: $!";
									print $out join('', map { s/^/${header_squished}_/; s/jgi.p|Paevar1|//g; s/jgi.p|Paevar_HGY_1|//g; $_ } @lines);
									close $out;
							} else {
									copy($GFF, "${GFF}.header.gff3") or die "Could not copy file $GFF to ${GFF}.header.gff3: $!";
							}
					}
			}
	}, $GENOME_DIR);

	# Concatenate all assembly files and make a blastn database
	rmtree("blastdb") if -d "blastdb";
	mkdir("blastdb") or die "Could not create directory blastdb: $!";
	system("sed -i 's/.fna/.starfish_format.fna/g' assemblies.txt") == 0 or die "system sed failed: $?";
	system("sed -i 's/.gff3/.starfish_format.gff3/g' gffs.txt") == 0 or die "system sed failed: $?";
	open my $out, '>', "blastdb/$species.assemblies.fna" or die "Could not open file blastdb/$species.assemblies.fna: $!";

	#######################
	#### REFORMAT GFFS ####
	#######################

	if (defined $opts{'gff'}) {

		my $datestring = localtime();
		print "[$datestring] reformatting gff featureIDs..\n";

		my ($gffFiles) = dim_1_hash($opts{'gff'}, "\t", "0:1");
		foreach my $genomeID (keys %{$gffFiles}) {
			Format_gff($genomeID, $gffFiles->{$genomeID}, $opts{'separator'}, $opts{'nameField'});
		}
	}

	my $datestring = localtime();
	print "[$datestring] done\n";
}

	# Concatenate all gff3 files into a single file (a useful shortcut for some analyses)
	open my $out, '>', "$BASEDIR/$species.gff3" or die "Could not open file $BASEDIR/$species.gff3: $!";
	find(sub {
			if (-f and /starfish_format.gff3$/) {
					open my $fh, '<', $File::Find::name or die "Could not open file $File::Find::name: $!";
					print $out while <$fh>;
					close $fh;
			}
	}, $GENOME_DIR);
	close $out;


sub Format_fasta {
	my ($genomeID, $fastaFile, $SEP) = @_;
	my ($fastaFileName, $fastaOUTDIR, $fastaSuffix) = fileparse($fastaFile, (".aa.fa", ".faa", ".fas", ".filtered.fa", ".fa", ".fasta", ".fna"));
	my ($OUT) = Open_FH("$fastaOUTDIR/$fastaFileName.starfish_format$fastaSuffix");
	my ($seqs) = Fasta_hash_nospace($fastaFile);
	foreach my $header (keys %{$seqs}) {
		my ($newName) = Format_name($header, $genomeID, $SEP);
		print $OUT ">$newName\n$seqs->{$header}\n";
	}
	close($OUT);
	# sanity check to confirm that fasta is indeed properly formatted
	Format_check_fasta("$fastaOUTDIR/$fastaFileName.starfish_format$fastaSuffix", $SEP);
}

sub Format_gff {
	my ($genomeID, $gffFile, $SEP, $NAMEFIELD) = @_;
	my ($gffFileName, $gffOUTDIR, $gffSuffix) = fileparse($gffFile, (".gff", ".gff3"));
	my ($OUT) = Open_FH("$gffOUTDIR/$gffFileName.starfish_format$gffSuffix");
	open (my $IN, '<', $gffFile) or usage("\nError: can't open $gffFile for reading\n");
	while (my $line = <$IN>) {
		next if ($line =~ m/^#/);
		chomp $line;
		$line =~ s/ /\t/g;
		my @fields = split/\t/, $line;
		# unfortunately, many ncbi or JGI info lines have spaces in them, so lets fix this
		my $contigID = shift @fields;
		my $annotator = shift @fields;
		my $featureType = shift @fields;
		my $begin = shift @fields;
		my $end = shift @fields;
		my $NULL1 = shift @fields;
		my $strand = shift @fields;
		my $NULL2 = shift @fields;
		my $info = join("", @fields);
		$info =~ s/\t/_/g;
		if (defined $featureType) {
			next if ($featureType ne 'gene'); # only parse gene features
			my ($newContigID) = Format_name($contigID, $genomeID, $SEP);
			if ($info =~ m/$NAMEFIELD([^;]+)/) { # if we can't parse gene name according to the user-provide NAMEFIELD, then skip the line
				my $geneName = $1;
				my ($newGeneName) = Format_name($geneName, $genomeID, $SEP);
				next if ($newGeneName eq 'NA');
				$info =~ s/$geneName/$newGeneName/g;
				($begin, $end) = ($end, $begin) if ($begin > $end); # many tools require begin coordinate to be < end coordinate, as expected
				print $OUT "$newContigID\t$annotator\t$featureType\t$begin\t$end\t$NULL1\t$strand\t$NULL2\t$info\n";
			} elsif ($info =~ m/gene_biotype=([^;]+)/) { # will happen for some JGI annotations that have tRNA and rRNA features that don't have protein IDs
				my $biotype = $1;
				$info =~ m/locus_tag=[^_]+_([^;]+)/;
				my $locustag = $1;
				my $geneName = "${biotype}${locustag}";
				my ($newGeneName) = Format_name($geneName, $genomeID, $SEP);
				next if ($newGeneName eq 'NA');
				($begin, $end) = ($end, $begin) if ($begin > $end); # many tools require begin coordinate to be < end coordinate, as expected
				print $OUT "$newContigID\t$annotator\t$featureType\t$begin\t$end\t$NULL1\t$strand\t$NULL2\t$info;$NAMEFIELD=$newGeneName\n";
			} else {
				my $datestring = localtime();
				print "[$datestring] warning: can't parse gene name from line: $line\n"
			}
		} else {
			my $datestring = localtime();
			print "[$datestring] warning: can't parse featureType from line in $genomeID gff: $line\n";
		}
	}
	close($OUT);
	# sanity check to confirm that gff is indeed properly formatted
	Format_check_gff("$gffOUTDIR/$gffFileName.starfish_format$gffSuffix", $SEP, $NAMEFIELD);
}

sub Opts_check {
	my ($opts) = @_;
	usage() if (exists $opts->{'h'});
	usage("\nError: no arguments provided\n") if (scalar keys %{$opts} == 0);
	if (not defined $opts->{'separator'}) {
		$opts->{'separator'} = '_';
	} elsif ($opts->{'separator'} eq ':') {
		usage("\nError: the separator character cannot be ':'\n");
	} elsif ($opts->{'separator'} eq ';') {
		usage("\nError: the separator character cannot be ';'\n");
	} elsif ($opts->{'separator'} eq '|') {
		usage("\nError: the separator character cannot be '|'\n");
	}
	if (defined $opts->{'separator'}) {
		$opts->{'separator'} = quotemeta($opts->{'separator'});	# to allow splitting on special characters, like '.'
	}
	if (defined $opts->{'gff'}) {
		usage("\nError: the file provided to --gff does not exist\n") if (! -f $opts->{'gff'});
	}
	if (defined $opts->{'fasta'}) {
		foreach my $fastaFilePath (@{$opts->{'fasta'}}) {
			usage("\nError: the file $fastaFilePath provided to --fasta does not exist\n") if (! -f $fastaFilePath);
		}
	}
	if (not defined $opts->{'nameField'}) {
		$opts->{'nameField'} = 'Name=';
	}
	if (not defined $opts->{'force'}) {
		$opts->{'force'} = 0;
	}
}



