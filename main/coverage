#!/usr/bin/env perl
use warnings;
use strict;
use Data::Dumper;
use File::Basename;
use Getopt::Long qw(:config auto_abbrev no_ignore_case);
use Sort::Naturally;
use Storable;
use FileHandle;
$|=1;
# Fishtank lib
use Fishtank::Utils qw(Commandline_check Open_FH dim_1_hash Fasta_hash);

sub usage {
	my $message = shift;
	my $usage = qq/
usage: starfish coverage [args]

map short reads to a reference element library.

Required:
-m, --mode        STR    read library type, either 'paired' or 'single'.
-r, --reads       FILE   2 or 3-column tsv: sampleID, read fastq1, read fastq2 if
                         --mode paired
-l, --lib         FILE   nucleotide fasta file of full length reference element(s). 
                         Individual mapping jobs will be launches for each sequence 
												 in the fasta file.
-x, --prefix      STR    prefix for naming all output files.
-o, --outdir      DIR    output directory.

Required, with defaults:
-d, --mindepth    INT    minimum read depth to consider a position as covered
                         (default: 5)
-a, --aligner     STR    alignment software to use, 'minimap2' or 'strobealign'
                         (default: strobealign)
-B, --batch_size  INT    number of sequences to process in parallel.
                         (default: 10)
-T, --threads     INT    number of threads to use for alignment and samtools jobs.
												 threads will be distributed evenly across processes.
                         (default: 1)
--minimapopts     STR    options to pass to minimap2
                         (default: \\'-ax sr\\')
--strobeopts      STR    options to pass to strobealign
                         (default: \\'-N 0 -U\\')
--filter          FLAG   filter BAM files before coverage calculation
                         (default: off)
--mapq            INT    minimum mapping quality for filtered reads
                         (default: 10)
--flags           STR    SAM flags to filter, comma-separated
                         (default: 'F4,F256')

Optional:
-c, --clean       STR    remove all intermediate mapping files
-h, --help               print more details and exit.

/;
	if (not defined $message) {
		$message = $usage;
	} else {
		$message = "$message\nuse -h for more details\n\n" ;
	}	
	die($message);
}

main: {

	# parse and check options
	my %opts;
	GetOptions(\%opts, 
		'mode|m=s',
		'reads|r=s',
		'lib|l=s',
		'prefix|x=s',
		'outdir|o=s',
		'aligner|a=s',
		'threads|T=i',
		'batch_size|B=i',
		'mindepth|d=i',
		'minimapopts=s',
		'strobeopts=s',
		'filter!',
		'mapq=i',
		'flags=s',
		'clean|c',
		'h|help');
	Opts_check(\%opts);

	# check dependencies
	my @commandlines = ("samtools", "bedtools");

	if ($opts{'aligner'} eq 'minimap2') {
		push @commandlines, "minimap2";	
		print "
Key parameters:
minimap2               $opts{minimapopts} -t $opts{threads}\n\n";
	}	

	if ($opts{'aligner'} eq 'strobealign') {
		push @commandlines, "strobealign";	
		print "
Key parameters:
strobealign            $opts{strobeopts} -t $opts{threads}\n\n";
	}	

	Commandline_check(\@commandlines);

	######################
	#### READ IN DATA ####
	######################

	my $datestring = localtime();
	print "\n[$datestring] reading in data..\n";
	
	# read in read paths
	my ($ome2forward, $ome2reverse);
	if ($opts{'mode'} eq 'paired') {
		($ome2forward) = dim_1_hash($opts{'reads'}, "\t", "0:1");
		($ome2reverse) = dim_1_hash($opts{'reads'}, "\t", "0:2");
	} elsif ($opts{'mode'} eq 'single') {
		($ome2forward) = dim_1_hash($opts{'reads'}, "\t", "0:1");
	}
	
	# read in element library
	my ($elementLib) = Fasta_hash($opts{'lib'});

	##########################################
	#### MAP READS AND CALCULATE COVERAGE ####
	##########################################
	
	# Create temporary directory for individual fasta files
	my $temp_dir = "$opts{outdir}/$opts{prefix}.temp";
	mkdir $temp_dir unless -d $temp_dir;

	# Write each sequence to a separate fasta file and prepare batch processing
	my @seq_batches;
	my $batch_size = $opts{'batch_size'} // 10;  # Default to 10 if not specified
	my $threads = $opts{'threads'} // 1;  # Default to 1 if not specified
	my $threads_per_process = int($threads / $batch_size);
	$threads_per_process = 1 if $threads_per_process < 1;  # Ensure at least 1 thread per process
	
	# Warn if threads aren't evenly distributed
	if ($opts{'threads'} > $batch_size && ($opts{'threads'} % $batch_size) != 0) {
		print "Warning: $opts{'threads'} threads cannot be evenly divided among $batch_size processes.\n",
			  "Using $threads_per_process thread(s) per process ",
			  "($opts{'threads'} - ", ($opts{'threads'} % $batch_size), " threads will be unused).\n";
	} else {
		print "Running with $batch_size parallel processes, $threads_per_process thread(s) each\n";
	}

	my @current_batch;
	my %safe_names;  # Store mapping between original and safe names
	
	foreach my $seqID (keys %{$elementLib}) {
		# Create a safe filename by replacing problematic characters
		my $safe_id = $seqID;
		$safe_id =~ s/[^a-zA-Z0-9._-]/_/g;  # Replace any non-alphanumeric chars with underscore
		$safe_names{$safe_id} = $seqID;  # Store mapping
		
		my $seq_file = "$temp_dir/$safe_id.fa";
		open(my $SEQ_OUT, '>', $seq_file) or die "Could not open $seq_file for writing: $!";
		print $SEQ_OUT ">$seqID\n$elementLib->{$seqID}\n";  # Use original seqID in fasta header
		close $SEQ_OUT;
		
		push @current_batch, $safe_id;  # Store safe_id in batch
		if (scalar(@current_batch) >= $batch_size) {
			push @seq_batches, [@current_batch];
			@current_batch = ();
		}
	}
	push @seq_batches, [@current_batch] if @current_batch; # Add remaining sequences
	
	# also convert to bam to save on space
	$datestring = localtime();
	print "[$datestring] executing $opts{mode} mapping with $opts{aligner} for ".scalar(%{$ome2forward})." samples..\n";

	foreach my $genomeID (nsort keys %{$ome2forward}) {
		$datestring = localtime();
		my $outputFilePrefix = "$opts{outdir}/$opts{prefix}.$genomeID";
		
		if (! -f "$outputFilePrefix.cov") {
			if (! -f "$ome2forward->{$genomeID}") {
				print "[$datestring] warning: can't find read file $ome2forward->{$genomeID}, skipping read mapping and coverage calculations for $genomeID\n";
				next;
			}
			if ($opts{'mode'} eq 'paired' && ! -f "$ome2reverse->{$genomeID}") {
				print "[$datestring] warning: can't find read file $ome2reverse->{$genomeID}, skipping read mapping and coverage calculations for $genomeID\n";
				next;
			}

			# Initialize coverage output file
			my ($OUT) = Open_FH("$outputFilePrefix.cov");
			print $OUT "#sampleID\telementID\telementLength\tfracCov\tavgDepth\n";
			
			# Process sequences in batches
			foreach my $batch (@seq_batches) {
				my @pids;
				
				# Fork processes for each sequence in the batch
				foreach my $seqID (@$batch) {
					my $pid = fork();
					
					if (!defined $pid) {
						die "Could not fork: $!";
					} elsif ($pid == 0) { # Child process
						my $seq_file = "$temp_dir/$seqID.fa";
						my $seq_output = "$outputFilePrefix.$seqID";
						
						# Run alignment
						if ($opts{'aligner'} eq 'minimap2') {
							if ($opts{'mode'} eq 'single') {
								system("minimap2 -t $threads_per_process $opts{minimapopts} $seq_file $ome2forward->{$genomeID} 1>$seq_output.sam 2>/dev/null") == 0
									or exit 1;
							} elsif ($opts{'mode'} eq 'paired') {
								system("minimap2 -t $threads_per_process $opts{minimapopts} $seq_file $ome2forward->{$genomeID} $ome2reverse->{$genomeID} 1>$seq_output.sam 2>/dev/null") == 0
									or exit 1;
							}
						} elsif ($opts{'aligner'} eq 'strobealign') {
							if ($opts{'mode'} eq 'single') {
								system("strobealign --no-progress -t $threads_per_process $opts{strobeopts} $seq_file $ome2forward->{$genomeID} 1>$seq_output.sam 2>/dev/null") == 0
									or exit 1;
							} elsif ($opts{'mode'} eq 'paired') {
								system("strobealign --no-progress -t $threads_per_process $opts{strobeopts} $seq_file $ome2forward->{$genomeID} $ome2reverse->{$genomeID} 1>$seq_output.sam 2>/dev/null") == 0
									or exit 1;
							}
						}
						
						# Process SAM file
						if ($opts{'filter'}) {
							# Convert SAM to BAM with filtering
							system("samtools view -@ $threads_per_process -S -b -q $opts{mapq} $opts{filter_flags} $seq_output.sam 1>$seq_output.temp.bam 2>/dev/null") == 0
								or exit 1;
						} else {
							# Convert SAM to BAM without filtering
							system("samtools view -@ $threads_per_process -S -b $seq_output.sam 1>$seq_output.temp.bam 2>/dev/null") == 0
								or exit 1;
						}
						
						system("samtools sort -@ $threads_per_process $seq_output.temp.bam 1>$seq_output.bam 2>/dev/null") == 0
							or exit 1;
						system("bedtools genomecov -ibam $seq_output.bam -d 1>$seq_output.temp.cov 2>/dev/null") == 0
							or exit 1;
						
						exit 0; # Child process exits
					} else { # Parent process
						push @pids, $pid;
					}
				}
				
				# Wait for all processes in this batch to complete
				foreach my $pid (@pids) {
					waitpid($pid, 0);
					die "A child process failed" if $? != 0;
				}
				
				# Process results for this batch
				foreach my $safe_id (@$batch) {
					my $seqID = $safe_names{$safe_id};  # Get original seqID
					my $seq_output = "$outputFilePrefix.$safe_id";
					
					# Process coverage data
					my ($total_depth, $covered_positions) = (0, 0);
					open(my $COVIN, '<', "$seq_output.temp.cov") or die "Could not open $seq_output.temp.cov: $!";
					while (my $line = <$COVIN>) {
						chomp $line;
						my ($seq, $pos, $depth) = split/\t/, $line;
						if ($depth >= $opts{'mindepth'}) {
							$total_depth += $depth;
							$covered_positions++;
						}
					}
					close $COVIN;

					# Calculate and write coverage statistics
					my $elementLength = length($elementLib->{$seqID});
					my $perCov = sprintf("%.3f", $covered_positions / $elementLength);
					my $avgDepth = sprintf("%.3f", $total_depth / $elementLength);
					print $OUT "$genomeID\t$seqID\t$elementLength\t$perCov\t$avgDepth\n";

					# Clean up intermediate files
					unlink("$seq_output.sam", "$seq_output.temp.bam", "$seq_output.temp.cov");
					unlink("$seq_output.bam") if (defined $opts{'clean'});
				}
			}
			close $OUT;
			
		} else {
			my $datestring = localtime();
			print "[$datestring] $outputFilePrefix.cov already exists, skipping read mapping and coverage calculations for $genomeID\n";
		}
	}
	
	# Clean up temporary directory
	system("rm -rf $temp_dir");

	$datestring = localtime();
	print "[$datestring] done\n";

}



sub Opts_check {
	my ($opts) = @_;
	usage() if (exists $opts->{'h'});
	usage("\nError: no arguments provided\n") if (scalar keys %{$opts} == 0);
	usage("\nError: please provide a file to --reads\n") if (not defined $opts->{'reads'});
	usage("\nError: the file provided to --reads does not exist\n") if (! -f $opts->{'reads'});
	usage("\nError: please provide a file to --lib\n") if (not defined $opts->{'lib'});
	usage("\nError: the file provided to --lib does not exist\n") if (! -f $opts->{'lib'});
	usage("\nError: please provide a string to --prefix\n") if (not defined $opts->{'prefix'});
	usage("\nError: please provide directory to --outdir\n") if (not defined $opts->{'outdir'});
	usage("\nError: the directory provided to --outdir does not exist\n") if (! -d $opts->{'outdir'});
	if (not defined $opts->{'mode'}) {
		usage("\nError: you must specify an option for --mode, either 'paired' or 'single'\n");
	} elsif ($opts->{'mode'} !~ m/^paired$|^single$/) {
		usage("\nError: unrecognized option for --mode, must be either 'paired' or 'single'\n");
	} 
	if (not defined $opts->{'aligner'}) {
		usage("\nError: you must specify an option for --aligner, either 'minimap2' or 'strobealign'\n");
	} elsif ($opts->{'aligner'} !~ m/^minimap2$|^strobealign$/) {
		usage("\nError: unrecognized option for --aligner, must be either 'minimap2' or 'strobealign'\n");
	} 
	if (not defined $opts->{'minimapopts'}) {
		$opts->{'minimapopts'} = '-ax sr';
	}
	if (not defined $opts->{'strobeopts'}) {
		$opts->{'strobeopts'} = "-N 0 -U";
	}
	if (not defined $opts->{'mindepth'}) {
		$opts->{'mindepth'} = 5;
	}
	if (not defined $opts->{'threads'}) {
		$opts->{'threads'} = 1;
	}
	
	if (not defined $opts->{'mapq'}) {
		$opts->{'mapq'} = 10;
	}
	if (not defined $opts->{'flags'}) {
		$opts->{'flags'} = 'F4,F256';
	}
	
	# Convert flags string to samtools format
	my $filter_flags = join(' ', map { "-$_" } split(',', $opts->{'flags'}));
	$opts->{'filter_flags'} = $filter_flags;
	
	# Warn if total threads is less than batch size
	if ($opts->{'threads'} < $opts->{'batch_size'}) {
		print "Warning: Number of threads ($opts->{'threads'}) is less than batch size ($opts->{'batch_size'}). Each process will use 1 thread.\n";
	}
}
